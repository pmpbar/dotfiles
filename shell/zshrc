export DOTFILES="$HOME/.dotfiles"
export TERM="screen-256color"
export EDITOR=vim
export PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:$HOME/.bin:$HOME/.cargo/bin:$HOME/.rvm/bin"
export ZSH=$HOME/.oh-my-zsh
export MANPAGER="sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu' \
  -c 'au au TermClose * :q' \
  -c 'nnoremap i <nop>' \
  -c 'nnoremap <Space> <C-f>' \
  -c 'noremap q :quit<CR>' -\""
# export MANPAGER="sh -c \"col -b | vim --not-a-term -c 'set ft=man ts=8 nomod nolist nonu' \
  # -c 'nnoremap i <nop>' \
  # -c 'nnoremap <Space> <C-f>' \
  # -c 'noremap q :quit<CR>' -\""

# Enable command auto-correction.
export ENABLE_CORRECTION=true
export DISABLE_AUTO_TITLE=true
plugins=(
  sudo
  docker
  docker-compose
  kubectl
)
# zsh plugins
platform=$(uname)
if [ "$platform" = "Darwin" ]; then
  # plugins+=()
elif [ -f /etc/debian_version ]; then
  # plugins=+()
elif [ -f /etc/redhat-release ]; then
  plugins=+(dnf)
elif [ -f /etc/arch-release ]; then
  # plugins=+()
elif `grep -Fq Amazon /etc/system-release 2> /dev/null`; then
  # plugins=+()
fi
source $ZSH/oh-my-zsh.sh

# theme
source $DOTFILES/shell/zsh-prompt.zsh-theme

# -- Aliases --
alias q="exit"
alias :q="exit"
alias zshrc="nvim ~/.zshrc && . ~/.zshrc"
alias redis="docker run -p 6379:6379 redis"
alias dev="ENV=development"
alias lzd="lazydocker"
alias virtualenv="python3 -m virtualenv"
alias myip="curl https://taybart.com/ip"
alias j="z"

function gobuildall() {
  GOOS=linux go build -o $2_linux $1
  GOOS=darwin go build -o $2_darwin  $1
  GOOS=windows go build -o $2_windows.exe $1
}

# Git Aliases
alias gs="git status"
alias gcm="git commit -m"
alias gd="git diff --patience --ignore-space-change"
alias gpo=" git pull origin"
alias gpom=" git pull origin master"
alias gitadddeleted="git ls-files --deleted -z | xargs -0 git rm"
alias gitdisabledirty="git config --add oh-my-zsh.hide-dirty 1"
alias gitremovemerged="git branch --merged master | \grep -v master | xargs -n 1 git branch -d"

# K8s Aliases
alias kc="kubectl"
function kcxt() {
  if [[ -z $1 ]]; then
    kubectl config get-contexts
  else
    kubectl config use-context $1
  fi
}

function triage() {
  namespace=${1:-default}

  config=https://raw.githubusercontent.com/taybart/dotfiles/master/triage.yaml
  kubectl apply -n $namespace -f $config
  msg="waiting for pod"
  waittime=0
  echo -n "$msg ${waittime}s"
  while [[ $(kubectl get -n $namespace pod/triage -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do
    sleep 1
    ((waittime++))
    printf "\r$msg ${waittime}s"
  done
  printf "\n"

  kubectl exec -n $namespace -ti triage -- /bin/zsh
  kubectl delete -n $namespace -f $config
}

function restsb() {
  mkdir -p $HOME/.tmp
  nvim $HOME/.tmp/sandbox.rest
}

# Platform Specific
platform=$(uname)
if [ "$platform" = "Darwin" ]; then
  alias copy="pbcopy"
  alias grep="grep -RIns --color=auto --exclude=\"tags\""
  alias ls="ls -G -l -h"
  alias lsusb="system_profiler SPUSBDataType"
  alias newmacaddr="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//' | xargs sudo ifconfig en0 ether"
  alias showhidden="defaults write com.apple.finder AppleShowAllFiles"
  alias ctags="`brew --prefix`/bin/ctags"
  alias update="brew update && brew upgrade"
  alias install="brew install"
  function remove() {
    brew rm $1
    brew rm $(join <(brew leaves) <(brew deps $1))
  }
function title {
  echo -ne "\033]0;"$*"\007"
}
# Usage: $ notify Title content
function notify {
  osascript -e "display notification \"$2\" with title \"$1\" sound name \"Ping\""
}
alias -s go="go run"
alias -s py="python"
else
  # alias grep="grep -RIns --color --exclude=\"tags\""
  alias ls="ls -lh --color"
  alias xup="xrdb ~/.Xresources"
  alias copy="xclip -sel clip"

  function open {
    xdg-open "$@" >/dev/null 2>&1
  }

  if [ -f /etc/debian_version ]; then
    alias update="sudo apt-get update && sudo apt-get upgrade && sudo apt-get dist-upgrade && sudo apt-get autoremove"
    alias install="sudo apt-get install"
    alias remove="sudo apt-get autoremove"

    xmodmap ~/.xmodmap > /dev/null 2>&1

  elif [ -f /etc/redhat-release ]; then
    alias update="sudo dnf update"
    alias install="sudo dnf install"
    alias remove="sudo dnf remove"
  elif [ -f /etc/arch-release ]; then
    alias update="yay -Syu"
    alias install="yay -S"
    alias remove="yay -R"
  elif `grep -Fq Amazon /etc/system-release 2> /dev/null`; then
    alias update="sudo yum update"
    alias install="sudo yum install"
    alias remove="sudo yum remove"
  fi
fi

# -- Functions --
alias newpw="head -c 500 /dev/urandom | tr -dc 'a-zA-Z0-9~!@#$%^&*_-' | fold -w 32 | head -n 1 | copy"

function biggest() {
  du -a $1 | sort -n -r | head -n 5
}

function whereisip() {
  curl ipinfo.io/$1
}

function b64 {
  if [ "$1" = "-d" ]; then
    echo -n $2 | base64 -d
  else
     base64 -w 0 $1 | copy
  fi
}


# -- Plugins --
# source if exist
function sife() {
  [ -f $1 ] && source $1
}
export FZF_DEFAULT_COMMAND='fd --type f'
sife ~/.fzf.zsh
sife $DOTFILES/shell/z/z.sh
sife $DOTFILES/shell/zsh-plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
bindkey '^E' autosuggest-accept
export ZSH_AUTOSUGGEST_USE_ASYNC=1

unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
}

autoload -U +X bashcompinit && bashcompinit
[ -f /usr/local/bin/mc ] && complete -o nospace -C /usr/local/bin/mc mc

# -- Sources --
sife $HOME/.zshrc.local

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
